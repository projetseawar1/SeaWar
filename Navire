
import java.util.*;

/**
 * 
 */
public class Navire {

	 private String nom;
	 private int pv;
	 private  int depMax;
	 private String nomJ;
	 private Orientation dir;
	 private Position pos;
	 private Set<Canons> canons;
	 
	 /*	variable rajoutée par rapport au diagramme */
	 private int dep;
	 private int nb_coup_reçu;
	
    /**
     * Default constructor
     */
    public Navire(String n, int vie, int d, String j, Orientation ori, Position p) {
    	this.nom = n;
    	this.pv = vie;
    	this.depMax = d;
    	this.nomJ = j;
    	this.dir = ori;
    	this.pos = p;
    	//Pour les canons : méthode addCanons
    }
    
    public Position getPos() {
    	return this.pos;
    }
    
    public String getNom() {
		return this.nom;
	}
    
    
    public void initTour() {
    	this.dep = this.depMax;
    	this.nb_coup_reçu = 0;
    	for(Canons canon : canons){
    		canon.initTour();
    	}
    }

    public boolean equals(Object obj) {
    	if(this == obj) {
    		return true;
    	}
    	if(!(obj instanceof Navire)) {
    		return false;
    	}
    	Navire nav = (Navire) obj;
    	return (this.nom.equals(nav.nom) && this.nomJ.equals(nav.nomJ));//TODO: Définir si ok  	
    }
    
    public String toString() {
    	return "Objet Navire\tnom = "+this.nom+"\tpv = "+this.pv+"\tdepMax = "+this.depMax+"\tnomJ = "+this.nomJ+"\tdir = "+this.dir+"\tpos = "+this.pos+"\n";
    }
   
    /**
     * 
     * @param canon avec lequel on veut tirer
     * @param pos : position de la case visée
     * @return succès/echec
     */
    public boolean tir(Canons canon, Position pos) {
    	return canon.tire(pos);
    }
    
    /**
     * @param pos  
     * @return
     */
    public boolean tirPrimaire(Position pos ) {
        // TODO implement here
        return false;
    }

    /**
     * @param pos 
     * @return
     */
    public boolean tirSecondaire(Position pos) {
        // TODO implement here
        return false;
    }

    /**
     * @param pos : la case où on veut aller //dir : l'orientation que l'on veut avoir 
     * @return echec ou succès du déplacement
     */
    public boolean deplacement(Position pos) {//TODO: la case d'arrivé doit-elle respecter une orientation ???
    	Case cell=plateau.getCase(pos);
        if(!(cell.getEstOccupe())){
        	int distance;//=getDistance(this.pos,this.dir,pos,dir) TODO:
        	if (distance <= this.dep) {
        		this.dep =- distance;
        		this.pos = pos;
        		/*
        		 * this.dir = dir;
        		 * plateau.move(this.pos,pos); //informer le plateau le changement de case 
        		 * */
        		return true;
        	}
        }
        return false;
    }

    /**
     * @param degats à retirer aux pv du navire
     */
    public void toucher(int degats) {
        this.pv =- degats;
        if(pv<=0) {
        	//TODO: Explosion ? :D 
        }
        
    }

    /**
     * @return
     */
    public List getInfo() {
        // TODO implement here
        return null;
    }

	

}
